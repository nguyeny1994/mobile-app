name: "Flutter iOS CI"

on:
  workflow_dispatch:
    inputs:
      trigger:
        description: "Manual trigger for deploying iOS flutter"
        required: true
        default: "true"
jobs:
  build:
    name: "Build"
    runs-on: macos-latest

    steps:
    #check xcode version
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version
    #checkout repo
      - name: Checkout repository
  
        uses: actions/checkout@v2

      - name: Set up JDK 11

        uses: actions/setup-java@v2
        with:
          distribution: 'adopt' #AdoptOpenJDK
          java-version: '11'
      -  name: Install Flutter
         run: |
           java -version
           brew install --cask flutter
           export PATH="$PATH:`flutter/bin/flutter`"
           flutter doctor
  
      - name: Install dependencies
  
        run: flutter pub get
      - name: Install Firebase CLI

        run: npm install -g firebase-tools
      # - name: Login Firebase

      #   run: firebase login
  
      - name: Build APK
  
        run:
          flutter build ios --release --no-codesign
      - name: Set up keychain
        run: |
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          echo ${{ secrets.APPLE_CERTIFICATE }} | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P ${{ secrets.CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Set up provisioning profile

        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo ${{ secrets.PROVISIONING_PROFILE }} | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Archive iOS

        run: |
          xcodebuild archive \
          -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -archivePath build/ios/archive/Runner.xcarchive \
          -sdk iphoneos \
          -configuration Release \
          -allowProvisioningUpdates

      - name: Create .ipa file

        run: |
          xcodebuild -exportArchive \
          -archivePath build/ios/archive/Runner.xcarchive \
          -exportOptionsPlist ios/ExportOptions.plist \
          -exportPath build/ios/ipa

      - name: Upload Artifact to Firebase App Distribution

        run: |
          curl -X POST \
          -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
          -F "file=@build/ios/ipa/Runner.ipa" \
          -F "appId=${{ secrets.FIREBASE_APP_ID }}" \
          -F "groups=testers" \
          "https://firebaseappdistribution.googleapis.com/v1alpha/apps/${{ secrets.FIREBASE_APP_ID }}/releases"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/google-credentials.json
      - name: Archive iOS

        run: |
          xcodebuild archive \
          -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -archivePath build/ios/archive/Runner.xcarchive \
          -sdk iphoneos \
          -configuration Release \
          -allowProvisioningUpdates
      - name: Create .ipa file
        run: |
          xcodebuild -exportArchive \
          -archivePath build/ios/archive/Runner.xcarchive \
          -exportOptionsPlist ios/ExportOptions.plist \
          -exportPath build/ios/ipa
      # fastlane deliver --ipa build/ios/ipa/Runner.ipa --username "your-apple-id"
      - name: Set up Google Application Credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > $HOME/google-credentials.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      - name: Upload artifact to Firebase App Distribution
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/google-credentials.json
        run: |
            cat $HOME/google-credentials.json
            firebase appdistribution:distribute build/app/outputs/flutter-apk/build/ios/ipa/Runner.ipa \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups testers
      - name: build ipa file
        run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

      #cài đặt chứng chỉ và provisioning profile của Apple
      # - name: Install the Apple certificate and provisioning profile
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # import certificate and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      # - name: build archive
      #   run: |
      #     xcodebuild -scheme "I am Groot" \
      #     -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
      #     -sdk iphoneos \
      #     -configuration Debug \
      #     -destination generic/platform=iOS \
      #     clean archive          

      # - name: export ipa
      #   env:
      #     EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      #   run: |
      #     EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
      #     echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
      #     xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

      # - name: Upload application
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: app
      #     path: ${{ runner.temp }}/build/I\ am\ Groot.ipa
      #     # you can also archive the entire directory 
      #     # path: ${{ runner.temp }}/build
      #     retention-days: 3










      # - name: Set up keychain

      #   run: |
      #     security create-keychain -p "" build.keychain
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p "" build.keychain
      #     security set-keychain-settings -t 3600 -u build.keychain
      #     echo ${{ secrets.APPLE_CERTIFICATE }} | base64 --decode > certificate.p12
      #     security import certificate.p12 -k build.keychain -P ${{ secrets.CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
      #   env:
      #     CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
    
      # - name: Set up provisioning profile
    
      #   run: |
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     echo ${{ secrets.PROVISIONING_PROFILE }} | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
    
      # - name: Archive iOS
    
      #   run: |
      #     xcodebuild archive \
      #     -workspace ios/Runner.xcworkspace \
      #     -scheme Runner \
      #     -archivePath build/ios/archive/Runner.xcarchive \
      #     -sdk iphoneos \
      #     -configuration Release \
      #     -allowProvisioningUpdates
    
      # - name: Create .ipa file
    
      #   run: |
      #     xcodebuild -exportArchive \
      #     -archivePath build/ios/archive/Runner.xcarchive \
      #     -exportOptionsPlist ios/ExportOptions.plist \
      #     -exportPath build/ios/ipa
        
      # - name: Upload Artifact to Firebase App Distribution
    
      #   run: |
      #     curl -X POST \
      #     -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
      #     -F "file=@build/ios/ipa/Runner.ipa" \
      #     -F "appId=${{ secrets.FIREBASE_APP_ID }}" \
      #     -F "groups=testers" \
      #     "https://firebaseappdistribution.googleapis.com/v1alpha/apps/${{ secrets.FIREBASE_APP_ID }}/releases"
      #   env:
      #     GOOGLE_APPLICATION_CREDENTIALS: $HOME/google-credentials.json
  #     - name: Install Google Cloud SDK
    
  #       run: |
  #         curl https://sdk.cloud.google.com | bash > /dev/null
  #         source $HOME/google-cloud-sdk/path.bash.inc
  #         gcloud components update
  #     - name: Set up Google Application Credentials
  #       run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > $HOME/google-credentials.json
  #       env:
  #         GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  #     # - name: Authenticate with Google Cloud

  #     #   run: |
  #     #     gcloud auth activate-service-account --key-file=$HOME/google-credentials.json
  #     #     gcloud config set project your-project-id
  #     # - name: Upload Artifact to Firebase App Distribution
  #     #   env:
  #     #     GOOGLE_APPLICATION_CREDENTIALS: $HOME/google-credentials.json
  #     #   run: |
  #     #     curl -X POST \
  #     #     -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
  #     #     -F "file=@build/ios/ipa/Runner.ipa" \
  #     #     -F "appId=${{ secrets.FIREBASE_APP_ID }}" \
  #     #     -F "groups=testers" \
  #     #     "https://firebaseappdistribution.googleapis.com/v1alpha/apps/${{ secrets.FIREBASE_APP_ID }}/releases"
  # # 
  #     - name: Upload artifact to Firebase App Distribution

  #       env:
  #         GOOGLE_APPLICATION_CREDENTIALS: $HOME/google-credentials.json
  #       run: |
  #           cat $HOME/google-credentials.json
  #           firebase appdistribution:distribute build/ios/iphoneos/Runner.app \
  #           --app ${{ secrets.FIREBASE_APP_ID }} \
  #           --groups testers
      # - name: Upload APK to Firebase App Distribution

      #   uses: wzieba/Firebase-Distribution-Github-Action@v1
      #   with:
      #     appId: ${{ secrets.FIREBASE_APP_ID }}
      #     token: ${{ secrets.FIREBASE_TOKEN }}
      #     groups: testers
      #     file: build/app/outputs/flutter-apk/app-release.apk
      # - name: Build iOS
  
      #   run: flutter build ios --release
      #   env:
      #     CI: true
  
      # - name: Upload APK
  
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: android-apk
      #     path: build/app/outputs/flutter-apk/app-release.apk
  
      # - name: Upload iOS build
  
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ios-build
      #     path: build/ios/ipa/*.ipa
